openapi: 3.0.0
info:
  title: Loan-app API
  version: 1.0.0
servers:
  - url: http://localhost:3900/api

tags:
  - name: Categories
  - name: Products
  - name: Auth
  - name: Users
  - name: Rentals

paths:
  /categories/{id}:
    get:
      tags:
        - Categories
      summary: Returns a category with the given id
      description: Use to get a category by id
      parameters:
        - $ref: "#/components/parameters/ObjectId"
      responses:
        "200":
          description: Returns a category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          description: Invalid ID. The ID must be a valid MongoDB ID.
        "404":
          description: Category with given ID not found
    put:
      tags:
        - Categories
      summary: Update existing category
      description: Used to update an existing category.
      parameters:
        - $ref: "#/components/parameters/ObjectId"
      requestBody:
        $ref: "#/components/requestBodies/Category"
      responses:
        "200":
          description: Category successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          description: Invalid category in request body.
        "404":
          description: The category does not exist.
  /categories:
    get:
      tags:
        - Categories
      summary: Returns all categories
      description: Use to get all categories
      responses:
        "200":
          description: A JSON array with all categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
    post:
      tags:
        - Categories
      summary: Insert a new category
      description: Use to insert a new category. The category may contain a parent reference. Note that only one level of subcategorization allowed.
      requestBody:
        $ref: "#/components/requestBodies/Category"
      responses:
        "200":
          description: A JSON object with the new category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          description: Invalid category format or parent is not a main category.
        "404":
          description: Parent with provided parent id does not exist

  /products/{id}:
    get:
      tags:
        - Products
      summary: Returns a product with the given id
      parameters:
        - $ref: "#/components/parameters/ObjectId"
      description: Returns a specific product
      responses:
        200:
          description: A JSON object representing the product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        400:
          description: Invalid ID. The ID must be a valid MongoDB ID.
        404:
          description: The product with the specified ID was not found

    delete:
      tags:
        - Products
      summary: Deletes a product with given id
      parameters:
        - $ref: "#/components/parameters/ObjectId"
      description: Use to delete a product by id
      responses:
        200:
          description: Returns a JSON object representing the deleted product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        400:
          description: Invalid ID. The ID must be a valid MongoDB ID.
        404:
          description: Product was not found

    put:
      tags:
        - Products
      summary: Updates an existing product with the given id
      parameters:
        - $ref: "#/components/parameters/ObjectId"
      requestBody:
        $ref: "#/components/requestBodies/Product"
      description: Update an existing product
      responses:
        "200":
          description: Returns the updated product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Invalid product in request body
        "404":
          description: Product with given ID was not found
  /products:
    get:
      tags:
        - Products
      summary: Returns a list of all products
      description: Use to request all products
      responses:
        200:
          description: A JSON array of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
    post:
      tags:
        - Products
      summary: Add a new product
      description: Use to add a new product
      requestBody:
        $ref: "#/components/requestBodies/Product"
      responses:
        200:
          description: Returns the new product with corresponding ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"

  /auth:
    post:
      tags:
        - Auth
      summary: Let user log in
      description: Use to log in a new user
      requestBody:
        $ref: "#/components/requestBodies/Auth"
      responses:
        200:
          description: Returs the JSON web token of the user
          content:
            text/plain:
              schema:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1ZTZjYjE3NWUwYjNiZDM2NGNjMmZmYjgiLCJuYW1lIjoiZmlyc3ROYW1lMSBsYXN0TmFtZTdEiLCJpc0FkbWluIjpmYWxzZSwiaWF0IjoxNTg0MzYxOTg4fQ.FsUbFWHD9AwI7UfxGwDUKtVtvwVfNg7Mo7vacsARG64

  /users/{id}:
    get:
      tags:
        - Users
      summary: Gets a user with the given ID
      parameters:
        - $ref: "#/components/parameters/ObjectId"
      description: Returns the specific user
      responses:
        200:
          description: A JSON object representing the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Invalid ID. The ID must be a valid MongoDB ID.
        404:
          description: The user with the specified ID was not found
    delete:
      tags:
        - Users
      summary: Deletes a user with given id
      parameters:
        - $ref: "#/components/parameters/ObjectId"
      description: Use to delete a user by id
      responses:
        200:
          description: Returns a JSON object representing the deleted User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Invalid ID. The ID must be a valid MongoDB ID.
        404:
          description: User was not found
    put:
      tags:
        - Users
      summary: Updates an existing User with the given id
      parameters:
        - $ref: "#/components/parameters/ObjectId"
      requestBody:
        $ref: "#/components/requestBodies/User"
      description: Update an existing product
      responses:
        "200":
          description: Returns the updated User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid User in request body
        "404":
          description: User with given ID was not found
  /users:
    get:
      tags:
        - Users
      summary: Return list of all Users
      description: User to add a new User

      responses:
        200:
          description: Return all the registered users.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    post:
      tags:
        - Users
      summary: Add a new user
      description: Use to add a new user
      requestBody:
        $ref: "#/components/requestBodies/User"
      responses:
        200:
          description: Return the new user with its corresponding ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Invalid email or password, or user is already registered

  /rentals:
    get:
      tags:
        - Rentals
      summary: Get rentals
      description: Get all rentals or only requested/unprocessed rentals
      parameters:
        - name: requested
          in: query
          required: true
          description: If true, returns only requested/unprocessed rentals
          schema:
            type: boolean
      responses:
        "200":
          description: Returns a list of rentals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Rental"
    post:
      tags:
        - Rentals
      summary: Create a new rental
      description: Let user rent an item
      requestBody:
        $ref: "#/components/requestBodies/Rental"
      responses:
        200:
          description: Returns the new rental
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: 5e6106c3b3817f3a88be0860
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 5e6106c3b3817f3a88be0860
                      name:
                        type: string
                        example: John Johnson
                  product:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 5e6106c3b3817f3a88be0860
                      name:
                        type: string
                        example: Playstation 4
                      entity:
                        type: object
                        properties:
                          _id:
                            type: string
                            example: 5e6106c3b3817f3a88be0860
                          identifier:
                            type: string
                            example: PS4_1
                          remarks:
                            type: string
                            example: Scratches
                  confirmedReturned:
                    type: boolean
                    example: false
  /rentals/returns:
    get: 
      tags:
        - Rentals
      summary: Get returns
      description: Get unprocessed returns or all returns
      parameters:
        - name: processed
          in: query
          schema:
            type: boolean
      responses:
          "200":
            description: Returns an array of rentals
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: "#/components/schemas/Rental"

    
components:
  schemas:
    Category:
      type: object
      properties:
        _id:
          type: string
          example: 5e539c042f9afe16e09ca244
        name:
          type: string
          example: Game Consoles
        parent:
          type: object
          properties:
            _id:
              type: string
              example: 5e539c042f9afe16e09ca244
            name:
              type: string
              example: Gaming
    Product:
      type: object
      properties:
        _id:
          type: string
          example: 5e539c042f9afe16e09ca244
        name:
          type: string
          example: Playstation 4
        category:
          type: object
          properties:
            _id:
              type: string
              example: 5e539c042f9afe16e09ca244
            name:
              type: string
              example: Gaming Consoles
        entities:
          type: array
          items:
            type: object
            properties:
              identifier:
                type: string
              availableForRental:
                type: boolean
              remarks:
                type: string
            example:
              identifier: PS4_1
              availableForRental: false
              remarks: Scratches
        numberOfLoans:
          type: number
          example: 10
        description:
          type: string
          example: A Playstation 4 console
        details:
          type: array
          items:
            type: object
            properties:
              displayName:
                type: string
              value:
                type: string
            example:
              displayName: Maximum players
              value: "4"
    Auth:
      type: object
      properties:
        email:
          type: string
          example: Josh_Johnson@gmail.com
        password:
          type: string
          example: "48927401"
    User:
      type: object
      properties:
        _id:
          type: string
          example: 5e6106c3b3817f3a88be0860
        firstName:
          type: string
          example: Josh
        lastName:
          type: string
          example: Johnson
        email:
          type: string
          example: Josh_Johnson@gmail.com
        password:
          type: string
          example: $2b$10$wCQyTwO/9XqjSwCOK3lFgevZlAYVSCWr6VJYzgha2zBCWk3X9uUkC
        phone:
          type: string
          example: "48927401"
    Rental:
      type: object
      properties:
        _id:
          type: string
          example: 5e6106c3b3817f3a88be0860
        user:
          type: object
          properties:
            _id:
              type: string
              example: 5e6106c3b3817f3a88be0860
            name:
              type: string
              example: John Johnson
        product:
          type: object
          properties:
            _id:
              type: string
              example: 5e6106c3b3817f3a88be0860
            name:
              type: string
              example: Playstation 4
            entity:
              type: object
              properties:
                _id:
                  type: string
                  example: 5e6106c3b3817f3a88be0860
                identifier:
                  type: string
                  example: PS4_1
                remarks:
                  type: string
                  example: Scratches
        dateOut:
          type: string
          format: date-time
          example: 2020-01-01T17:32:28Z
        dateReturned:
          type: string
          format: date-time
          example: 2020-01-10T17:32:28Z
        confirmedReturned:
          type: boolean
          example: true
        pickupInstructions:
          type: string
          example: "Pick up at the mall. Call 99887766 when there"
        returnInstructions:
          type: string
          example: "Call me at 99887766 to schedule return"
        remarks:
          type: string
          example: "Power cable was damaged under use"

  requestBodies:
    Category:
      description: A JSON object containing category information. **Parent field is optional**
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: Game Consoles
              parent:
                type: object
                properties:
                  _id:
                    type: string
                    example: 5e539c042f9afe16e09ca244
    Product:
      description: A JSON object containing product information
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: Playstation 4
              category:
                type: object
                properties:
                  _id:
                    type: string
                    example: 5e539c042f9afe16e09ca244
              entities:
                type: array
                items:
                  type: object
                  properties:
                    identifier:
                      type: string
                    availableForRental:
                      type: boolean
                    remarks:
                      type: string
                  example:
                    identifier: PS4_1
                    availableForRental: false
                    remarks: Scratches
              numberOfLoans:
                type: number
                example: 10
              description:
                type: string
                example: A Playstation 4 console
              details:
                type: array
                items:
                  type: object
                  properties:
                    displayName:
                      type: string
                    value:
                      type: string
                  example:
                    displayName: Maximum players
                    value: "4"
    User:
      description: A JSON object containing user
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              firstName:
                type: string
                example: Josh
              lastName:
                type: string
                example: Johnson
              email:
                type: string
                example: Josh_Johnson@gmail.com
              password:
                type: string
                example: PasswordForJosh_Johnson
              phone:
                type: string
                example: "48927401"
    Auth:
      description: A JSON object containing user email and password
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                example: Josh_Johnson@gmail.com
              password:
                type: string
                example: PasswordForJosh_Johnson
    Rental:
      description: A JSON object containing the productId
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              productId:
                type: string
                example: 5e539c042f9afe16e09ca244

  parameters:
    ObjectId:
      name: id
      in: path
      description: Valid mongoose Object Id
      required: true
      schema:
        type: string
        minimum: 24
        example: 5e539c042f9afe16e09ca244

  securitySchemes:
    Auth-Token:
      type: apiKey
      in: header
      name: x-auth-token

security:
  - Auth-Token: []
